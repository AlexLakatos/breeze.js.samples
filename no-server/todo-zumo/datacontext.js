/*
 * datacontext service
 * Encapsulates data access and model definition
 * This is the Windows Azure Mobile Services version
 */
(function (WindowsAzure){

    angular.module('app').factory('datacontext', ['$log', '$q', 'breeze', factory]);

    function factory($log, $q, breeze){

        var extend = breeze.core.extend;

        var msInfo ={
            // Ward's Todo Mobile Service
            // url: 'https://wardtodomobileservice.azure-mobile.net/',
            // appKey: 'psChxvAmcXMcsgEhqqjmfTkoxzwuWG62'

            //Donna Malayeri's Todo Mobile Service
            url: 'https://donnam-zumotest.azure-mobile.net/',
            appKey: 'MxhjqYLwepMvaSSJdCAauHzhfddkQC33'
        };

        var manager = getEntityManager();

        var client = new WindowsAzure.MobileServiceClient(msInfo.url, msInfo.appKey);

        var todoItemTable = client.getTable('todoitem');

        var datacontext = {
            addTodoItem:      addTodoItem,
            deleteTodoItem:   deleteTodoItem,
            refreshTodoItems: refreshTodoItems,
            save:             save,
            updateTodoItem:   updateTodoItem // TODO: won't use in Breeze version
        };
        return datacontext;
        /////////////////////////////

        function addTodoItem(initialValues){
            initialValues = extend({complete: false}, initialValues);
            return todoItemTable.insert(initialValues).then(null, handleError);
        }

        function deleteTodoItem(todoItem){
            todoItem.deleted = true;
            return todoItemTable.del({ id: todoItem.id }).then(null, handleError);
        }

        function handleError(error) {
            var status = error.status ? error.status + ' - ' : '';
            var err = status + (error.message ? error.message : 'unknown error; check console.log');
            throw new Error(err); // so downstream listener gets it.
        }

        function refreshTodoItems(includeComplete) {

            return breeze.EntityQuery.from('TodoItem')
                .using(manager).execute()
                .then(bSuccess).catch(handleError);

            function bSuccess(data){
                $log.log('breeze query succeeded');
                return data.results;
            }

            var query = todoItemTable;
            // get all unless 'includeComplete' is a bool
            if (typeof includeComplete === 'boolean') {
              query = query.where({ complete: includeComplete });
            }
            return query.read().then(null, handleError);
        }

        function save(){ /* not implemented yet */}

        /* TODO: way chatty now but we won't use in Breeze version anyway */
        function updateTodoItem(todoItem){
            var values = {
                id: todoItem.id,
                complete: todoItem.complete,
                text: todoItem.text
            }
            return todoItemTable.update(values).then(null, handleError);
        }


        function getEntityManager(){
            // use mobile services dataservice adapter to query and save
            var adapter = breeze.config.initializeAdapterInstance('dataService', 'mobileservices', true);
            adapter.mobileServicesInfo = msInfo;
            adapter.Q = $q;

            var serviceName = msInfo.url+"tables/";
            var manager = new breeze.EntityManager(serviceName);
            setMetadata(manager);
            return manager;
        }

        function setMetadata(manager) {

            var helper = new breeze.config.MetadataHelper('model', breeze.AutoGeneratedKeyType.Identity);
            var DT = breeze.DataType;
            var store = manager.metadataStore;
            store.addDataService(manager.dataService);
            addTodoItem();

            function addTodoItem() {
                var et = {
                    name: "TodoItem",
                    defaultResourceName: "TodoItem",
                    dataProperties: {
                        id:       { dataType: DT.Guid },
                        text:     { maxLength: 400, nullOk: false  },
                        complete: { dataType: DT.Boolean, nullOk: false }
                    }
                };

                return helper.addTypeToStore(store, et);
            }
        }

    }
})(this.WindowsAzure);
