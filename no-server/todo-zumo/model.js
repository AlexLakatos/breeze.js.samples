/*
 * entityManagerFactory creates the model and delivers a new EntityManager
 */
(function (){
    'use strict';
    angular.module('app').factory('model', ['breeze', service]);

    function service(breeze){
        var model =  {
            setModel: setModel
        };
        return model;
        //////////////////////

        function setModel(manager) {
            var store = manager.metadataStore;
            var helper = new breeze.config.MetadataHelper('model', breeze.AutoGeneratedKeyType.Identity);
            var DT = breeze.DataType;

            // Associate the metadata with the manager's data service
            store.addDataService(manager.dataService);

            addTodoItemType();

            function addTodoItemType() {
                var entityType = {
                    name: "TodoItem",
                    defaultResourceName: "TodoItem",
                    dataProperties: {
                        id:       { dataType: DT.Guid },
                        text:     { maxLength: 50, nullOk: false  },
                        complete: { dataType: DT.Boolean, required: true }
                    }
                };

                helper.addTypeToStore(store, entityType);

                /**********************************************
                 * TODO: Consider enabling this extension to the model
                 * Add non-persistent ("unmapped") members:
                 * ---------------------------------------
                 * read-only 'entityStateName' indicating the entity's change-state
                 * Adding this property would allow a less "dotted" binding in page.html
                 * Now:  class="item-text {{item.entityAspect.entityState.name}}"
                 * Then: class="item-text {{item.entityStateName}}"
                 * Two approaches:
                 *   ES5 defineProperty (via Object.defineProperty)
                 *   function on prototype
                 **********************************************/

//                function TodoItem(){
//                    // ES5 defineProperty, bind to entityStateName
//                    Object.defineProperty(this, 'entityStateName', {
//                        enumerable: true,
//                        get: function(){
//                            return this.entityAspect ? this.entityAspect.entityState.name: 'Detached';}
//                    });
//                };

                // Style #2: function on the prototype, bind to entityStateName()
                //TodoItem.prototype.entityStateName = function(){return this.entityAspect.entityState.name};
//                store.registerEntityTypeCtor('TodoItem', TodoItem);

                return entityType;
            }
        }
    }
})();
